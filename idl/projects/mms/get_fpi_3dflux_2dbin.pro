;To get the 3D counts data for a certain time interval
;Inputs:
;sat: sc number
;Optional inputs:
;time: starting time to get the data. If not set as a keyword, it
;should be set by timespan in advance
;varname: tplot variable name for the counts data generated by
;fpi_3dflux_2dbin.pro
;dur: duration for the data to be returned
;ave: if set, the data are taken average over the time between 'time'
;and 'time+dur'; otherwise, individual data points for this interval
;are returned
;repbin: if set, replicate bins like energy, gf with the time
;dimension: change from [32,512] to [32,512,ntime]
FUNCTION get_fpi_3dflux_2dbin,sat,specie,time=time,resolution=resolution,$
  dur=dur,ave=ave,repbin=repbin,units_name=units_name

sat_str=string(sat,format='(I1)')
if ~keyword_set(resolution) then resolution='brst'
if ~keyword_set(units_name) then units_name='counts'
case strlowcase(units_name) of
  'counts':unit_str='cnts'
  'df':units_str='dist'
endcase 
varname='mms'+sat_str+'_d'+specie+'s_'+resolution+'SkyMap_'+units_str+'_2dbin'
get_data,varname,data=d

if ~keyword_set(time) then begin
   get_timespan,trange
   time = trange[0]
   dur = time_double(trange[1])-time_double(trange[0])
endif
if ~keyword_set(dur) then begin
   dur = 0
endif
indt = where(d.time ge time_double(time) and d.time lt time_double(time)+dur,cc)

if cc eq 0 then begin
   indt = where(abs(d.time-time_double(time)) eq min(abs(d.time-time_double(time))))
   indt = indt[0]
   data = d.data[indt,*,*]
   magf = d.magf[*,indt]
   sc_pot = d.sc_pot[indt]
   time = d.time[indt]
   end_time = d.end_time[indt]
endif else begin
   if cc eq 1 then begin
      indt = indt[0]
      data = d.data[indt,*,*]
      magf = d.magf[*,indt]
      sc_pot = d.sc_pot[indt]
      time = d.time[indt]
      end_time = d.end_time[indt]
   endif else begin
      if keyword_set(ave) then begin
         data = mean(d.data[indt,*,*],dimension=1)
         magf = mean(d.magf[*,indt],dimension=2)
         sc_pot = mean(d.sc_pot[indt])
         ;indt = indt[0]
         time = d.time[indt[0]]
         end_time = d.end_time[indt[cc-1]]
      endif else begin
         data = d.data[indt,*,*]
         magf = d.magf[*,indt]
         sc_pot = d.sc_pot[indt]
         time = d.time[indt]
         end_time = d.end_time[indt]
      endelse
   endelse
endelse

if cc gt 1 and keyword_set(repbin) then begin
   sizebin = size(d.bins)
   dt_arr = fltarr(sizebin[2],sizebin[1],cc)
   geom_factor=fltarr(sizebin[2],sizebin[1],cc)
   gf = fltarr(sizebin[2],sizebin[1],cc)
   eff = fltarr(sizebin[2],sizebin[1],cc)
   energy = fltarr(sizebin[2],sizebin[1],cc)
   denergy = fltarr(sizebin[2],sizebin[1],cc)
   theta = fltarr(sizebin[2],sizebin[1],cc)
   dtheta = fltarr(sizebin[2],sizebin[1],cc)
   phi = fltarr(sizebin[2],sizebin[1],cc)
   dphi = fltarr(sizebin[2],sizebin[1],cc)

   for it=0,cc-1 do begin
      dt_arr[*,*,it]=transpose(d.dt_arr)
      geom_factor[*,*,it]=transpose(d.geom_factor)
      gf[*,*,it]=transpose(d.gf)
      eff[*,*,it]=transpose(d.eff)
      energy[*,*,it]=transpose(d.energy)
      denergy[*,*,it]=transpose(d.denergy)
      theta[*,*,it]=transpose(d.theta)
      dtheta[*,*,it]=transpose(d.dtheta)
      phi[*,*,it]=transpose(d.phi)
      dphi[*,*,it]=transpose(d.dphi)
   endfor
endif else begin
   dt_arr=transpose(d.dt_arr)
   geom_factor=transpose(d.geom_factor)
   gf=transpose(d.gf)
   eff=transpose(d.eff)
   energy=transpose(d.energy)
   denergy=transpose(d.denergy)
   theta=transpose(d.theta)
   dtheta=transpose(d.dtheta)
   phi=transpose(d.phi)
   dphi=transpose(d.dphi)
endelse

dat = {spacecraft:d.spacecraft[0],$
       project_name:d.project_name[0],$
       data_name: d.data_name[0],$
       units_name: d.units_name[0],$
       units_procedure: d.units_procedure[0],$
       valid: d.valid[0],$
       time: time,$
       end_time:end_time,$
       delta_t: d.delta_t[0],$
       integ_t: d.integ_t[0],$
       dt_arr: dt_arr,$
       geom_factor: geom_factor,$
       gf:  gf,$
       eff:  eff,$
       nenergy: d.nenergy[0],$
       nbins: d.nbins[0],$
       bins:  transpose(d.bins),$
       energy:  energy,$
       denergy:  denergy,$
       theta:  theta,$
       phi:  phi,$
       dtheta:  dtheta,$
       dphi: dphi,$
       data: transpose(data),$
       dead: d.dead[0],$
       mass: d.mass[0],$
       charge: d.charge[0],$
       magf: magf,$
       sc_pot:sc_pot}

return,dat
END
