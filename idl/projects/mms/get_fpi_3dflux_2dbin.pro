;To get the 3D counts data for a certain time interval
;Inputs:
;sat: sc number
;Optional inputs:
;time: starting time to get the data. If not set as a keyword, it
;should be set by timespan in advance
;varname: tplot variable name for the counts data generated by
;fpi_3dflux_2dbin.pro
;dur: duration for the data to be returned
;ave: if set, the data are taken average over the time between 'time'
;and 'time+dur'; otherwise, individual data points for this interval
;are returned
;repbin: if set, replicate bins like energy, gf with the time
;dimension: change from [32,512] to [32,512,ntime]
;
;update history
;10/19/2015 set energy table according to parity table
FUNCTION get_fpi_3dflux_2dbin,sat,specie,time=time,resolution=resolution,$
  dur=dur,ave=ave,repbin=repbin,units_name=units_name

sat_str=string(sat,format='(I1)')
if ~keyword_set(resolution) then resolution='brst'
if ~keyword_set(units_name) then units_name='counts'
case strlowcase(units_name) of
  'counts':unit_str='cnts'
  'df':units_str='dist'
endcase 
varname='mms'+sat_str+'_d'+specie+'s_'+resolution+'SkyMap_'+units_str+'_2dbin'
get_data,varname,data=d

if ~keyword_set(time) then begin
   get_timespan,trange
   time = trange[0]
   dur = time_double(trange[1])-time_double(trange[0])
endif
if ~keyword_set(dur) then begin
   dur = 0
endif
indt = where(d.time ge time_double(time) and d.time lt time_double(time)+dur,cc)

if cc eq 0 then begin
   indt = where(abs(d.time-time_double(time)) eq min(abs(d.time-time_double(time))))
   indt = indt[0]
   data = d.data[indt,*,*]
   magf = d.magf[*,indt]
   sc_pot = d.sc_pot[indt]
   time = d.time[indt]
   end_time = d.end_time[indt]
   parity = d.parity[indt]
endif else begin
   if cc eq 1 then begin
      indt = indt[0]
      data = d.data[indt,*,*]
      magf = d.magf[*,indt]
      sc_pot = d.sc_pot[indt]
      time = d.time[indt]
      end_time = d.end_time[indt]
      parity = d.parity[indt]
   endif else begin
      if keyword_set(ave) then begin
         data = mean(d.data[indt,*,*],dimension=1)
         magf = mean(d.magf[*,indt],dimension=2)
         sc_pot = mean(d.sc_pot[indt])
         ;indt = indt[0]
         time = d.time[indt[0]]
         end_time = d.end_time[indt[cc-1]]
      endif else begin
         data = d.data[indt,*,*]
         magf = d.magf[*,indt]
         sc_pot = d.sc_pot[indt]
         time = d.time[indt]
         end_time = d.end_time[indt]
         parity = d.parity[indt]
      endelse
   endelse
endelse

;ion energy table
;parity 0
ienergy0 = [10.63829787,$
            13.66471264,$
            17.55209093,$
            22.54536222,$
            28.95913424,$
            37.19751529,$
            47.77957561,$
            61.37205207,$
            78.83135686,$
            101.2575368,$
            130.0635835,$
            167.0644605,$
            214.5914575,$
            275.6390766,$
            354.0537049,$
            454.775961,$
            584.1519855,$
            750.3332881,$
            963.7903443,$
            1237.972302,$
            1590.154362,$
            2042.526227,$
            2623.590192,$
            3369.956971,$
            4328.652401,$
            5560.080372,$
            7141.828653,$
            9173.557412,$
            11783.27844,$
            15135.42071,$
            19441.19042,$
            24971.87837]

;parity 1
ienergy1 = [12.05691849,$
            15.48690669,$
            19.89266819,$
            25.55179389,$
            32.82084458,$
            42.15781653,$
            54.15099817,$
            69.55603596,$
            89.34354494,$
            114.7602636,$
            147.4076064,$
            189.3425628,$
            243.2073009,$
            312.3956407,$
            401.2668861,$
            515.4204891,$
            662.0488502,$
            850.3904856,$
            1092.312112,$
            1403.056327,$
            1802.201983,$
            2314.89779,$
            2973.446831,$
            3819.341872,$
            4905.879661,$
            6301.518969,$
            8094.193918,$
            10396.85439,$
            13354.5826,$
            17153.73417,$
            22033.67973,$
            28301.88679]

;average
ienergy_ave = [11.32541789,$
               14.54730661,$
               18.68576787,$
               24.00155096,$
               30.82958391,$
               39.60007608,$
               50.86562406,$
               65.33602881,$
               83.92301755,$
               107.7976884,$
               138.4642969,$
               177.8550339,$
               228.4517655,$
               293.4424065,$
               376.9217793,$
               484.1496135,$
               621.8819424,$
               798.7967759,$
               1026.04087,$
               1317.932043,$
               1692.861289,$
               2174.451528,$
               2793.045997,$
               3587.62007,$
               4608.236949,$
               5919.201968,$
               7603.114233,$
               9766.070893,$
               12544.35193,$
               16113.00665,$
               20696.88294,$
               26584.79405]

;electron energy table
eenergy0=[10.95890411,$
          14.05183351,$
          18.01767978,$
          23.10280608,$
          29.6231066,$
          37.98363029,$
          48.70374296,$
          62.44939098,$
          80.07447059,$
          102.673873,$
          131.6515005,$
          168.8074782,$
          216.4499803,$
          277.5386166,$
          355.868287,$
          456.3049253,$
          585.0877766,$
          750.2169874,$
          961.9505835,$
          1233.441712,$
          1581.555729,$
          2027.917899,$
          2600.256777,$
          3334.126748,$
          4275.116699,$
          5481.682063,$
          7028.776138,$
          9012.506277,$
          11556.10419,$
          14817.58126,$
          18999.54437,$
          24361.78212]

eenergy1=[12.40937936,$
          15.91167611,$
          20.4024254,$
          26.16059799,$
          33.54389854,$
          43.01098657,$
          55.14996905,$
          70.71493421,$
          90.67279651,$
          116.2633624,$
          149.0763489,$
          191.1501382,$
          245.0984049,$
          314.2724806,$
          402.9695424,$
          516.6995589,$
          662.5275761,$
          849.5126066,$
          1089.270386,$
          1396.694958,$
          1790.883908,$
          2296.324729,$
          2944.416016,$
          3775.417982,$
          4840.953473,$
          6207.214841,$
          7959.075893,$
          10205.36435,$
          13085.62237,$
          16778.77506,$
          21514.24552,$
          27586.2069]

eeerngy_ave=[11.66161217,$
             14.95286673,$
             19.17301144,$
             24.58420677,$
             31.52260272,$
             40.41922083,$
             51.82672975,$
             66.45377773,$
             85.20901465,$
             109.2575384,$
             140.0932726,$
             179.63177,$
             230.3292099,$
             295.3349785,$
             378.6873127,$
             485.5641602,$
             622.6048397,$
             798.322484,$
             1023.632885,$
             1312.532598,$
             1682.968421,$
             2157.952275,$
             2766.99073,$
             3547.917992,$
             4549.246205,$
             5833.179086,$
             7479.476099,$
             9590.4072,$
             12297.10598,$
             15767.71584,$
             20217.83525,$
             25923.91101]

sizebin = size(d.bins)          ;num_bin, num_energy

if cc gt 1 then begin
   if ~keyword_set(ave) then begin
      energy = fltarr(sizebin[2],sizebin[1],cc) ;num_energy,num_bin,num_time
      ind_p0 = where(parity eq 0,c1)
      if c1 gt 0 then begin
         if d.charge gt 0 then begin
            for ie=0,n_elements(ienergy0)-1 do begin
               energy[ie,*,ind_p0]=ienergy0[ie]
            endfor
         endif else begin
            for ie=0,n_elements(eenergy0)-1 do begin
               energy[ie,*,ind_p0]=eenergy0[ie]
            endfor
         endelse
      endif
      
      ind_p1 = where(parity eq 1,c2)
      if c2 gt 0 then begin
         if d.charge gt 0 then begin
            for ie=0,n_elements(ienergy1)-1 do begin
               energy[ie,*,ind_p1]=ienergy1[ie]
            endfor
         endif else begin
            for ie=0,n_elements(eenergy1)-1 do begin
               energy[ie,*,ind_p1]=eenergy1[ie]
            endfor
         endelse
      endif
   endif else begin ;keyword_set(ave)
      energy = fltarr(sizebin[2],sizebin[1]) ;num_energy,num_bin,num_time      
      if d.charge gt 0 then begin
         for ie=0,n_elements(ienergy_ave)-1 do begin
            energy[ie,*] = ienergy_ave[ie]
         endfor
      endif else begin
         for ie=0,n_elements(eenergy_ave)-1 do begin
            energy[ie,*] = eenergy_ave[ie]
         endfor
      endelse
   endelse

endif else begin                ;cc eq 1
   energy = fltarr(sizebin[2],sizebin[1])
   if parity eq 0 then begin
      if d.charge gt 0 then begin
         for ie=0, n_elements(ienergy0)-1 do begin
            energy[ie,*] = ienergy0[ie]
         endfor
      endif else begin
         for ie=0, n_elements(eenergy0)-1 do begin
            energy[ie,*] = eenergy0[ie]
         endfor
      endelse
   endif else begin ;parity 1
      if d.charge gt 0 then begin
         for ie=0, n_elements(ienergy1)-1 do begin
            energy[ie,*] = ienergy1[ie]
         endfor
      endif else begin
         for ie=0, n_elements(eenergy1)-1 do begin
            energy[ie,*] = eenergy1[ie]
         endfor
      endelse
   endelse
endelse
loge = reform(alog10(energy[*,0]))
del_v = energy
del_v[*] = loge[1]-loge[0]
denergy = energy*del_v/alog10(exp(1))

if cc gt 1 and keyword_set(repbin) then begin
   sizebin = size(d.bins)
   dt_arr = fltarr(sizebin[2],sizebin[1],cc)
   geom_factor=fltarr(sizebin[2],sizebin[1],cc)
   gf = fltarr(sizebin[2],sizebin[1],cc)
   eff = fltarr(sizebin[2],sizebin[1],cc)
   ;energy = fltarr(sizebin[2],sizebin[1],cc)
   ;denergy = fltarr(sizebin[2],sizebin[1],cc)
   theta = fltarr(sizebin[2],sizebin[1],cc)
   dtheta = fltarr(sizebin[2],sizebin[1],cc)
   phi = fltarr(sizebin[2],sizebin[1],cc)
   dphi = fltarr(sizebin[2],sizebin[1],cc)

   for it=0,cc-1 do begin
      dt_arr[*,*,it]=transpose(d.dt_arr)
      geom_factor[*,*,it]=transpose(d.geom_factor)
      gf[*,*,it]=transpose(d.gf)
      eff[*,*,it]=transpose(d.eff)
      ;energy[*,*,it]=transpose(d.energy)
      ;denergy[*,*,it]=transpose(d.denergy)
      theta[*,*,it]=transpose(d.theta)
      dtheta[*,*,it]=transpose(d.dtheta)
      phi[*,*,it]=transpose(d.phi)
      dphi[*,*,it]=transpose(d.dphi)
   endfor
endif else begin
   dt_arr=transpose(d.dt_arr)
   geom_factor=transpose(d.geom_factor)
   gf=transpose(d.gf)
   eff=transpose(d.eff)
   ;energy=transpose(d.energy)
  ; denergy=transpose(d.denergy)
   theta=transpose(d.theta)
   dtheta=transpose(d.dtheta)
   phi=transpose(d.phi)
   dphi=transpose(d.dphi)
endelse

dat = {spacecraft:d.spacecraft[0],$
       project_name:d.project_name[0],$
       data_name: d.data_name[0],$
       units_name: d.units_name[0],$
       ;units_procedure: d.units_procedure[0],$
       valid: d.valid[0],$
       time: time,$
       end_time:end_time,$
       delta_t: d.delta_t[0],$
       integ_t: d.integ_t[0],$
       dt_arr: dt_arr,$
       geom_factor: geom_factor,$
       gf:  gf,$
       eff:  eff,$
       nenergy: d.nenergy[0],$
       nbins: d.nbins[0],$
       bins:  transpose(d.bins),$
       energy:  energy,$
       denergy:  denergy,$
       parity: parity,$
       theta:  theta,$
       phi:  phi,$
       dtheta:  dtheta,$
       dphi: dphi,$
       data: transpose(data),$
       ;dead: d.dead[0],$
       mass: d.mass[0],$
       charge: d.charge[0],$
       magf: magf,$
       sc_pot:sc_pot}

return,dat
END
